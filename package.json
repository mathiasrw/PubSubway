{
  "name": "pubsubway",
  "version": "0.19.2",
  "description": "Build logic into your observer pattern with easy to read chunks of code with a light footprint. Pubsub for modern JS apps is to get out of callback hell - take the subway in a traffic jam.",
  "main": "pubsubway.js",
  "scripts": {
    "test": "node test/test.js"
  },
  "engines": {
    "node": ">= 0.4"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mathiasrw/PubSubway.git"
  },
  "keywords": [
    "pubsub",
    "callback",
    "publish",
    "subscribe"
  ],
  "author": {
    "name": "Mathias Rangel Wulff",
    "email": "mathias@rawu.dk",
    "url": "http://rawu.dk/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mathiasrw/PubSubway/issues"
  },
  "homepage": "https://github.com/mathiasrw/PubSubway",
  "dependencies": {},
  "devDependencies": {
    "utest": "",
    "assert": "",
    "should": ""
  },
  "readme": "[![npm install pubsubway](https://nodei.co/npm/pubsubway.png)](https://www.npmjs.org/package/pubsubway)\r\n\r\n[![Build Status](https://travis-ci.org/mathiasrw/PubSubway.svg?branch=master)](https://travis-ci.org/mathiasrw/PubSubway) \r\n\r\n\r\nPubSubway \r\n=========\r\n\r\n#### Plain pubsub module with a spice of logic to when subscribers get the message.\r\n\r\n\r\n\r\nHave you ever had \r\n\r\n1. Code you wanted to only **invoke once** - but with a message that repeats?\r\n2. Code you wanted to  only **invoke when a range of messages have all been published** (in random order)?\r\n3. Code you wanted to **pause invoking** at speciffic conditions?\r\n\r\nOf cause you have... cause thats what real world code needs. \r\n\r\nAnd everytime you have dealt with it by making some good counters around your pubsub structure and build nicely structured features to take care of when to invoke and when not to. \r\n\r\n**PubSubway replaces the counters and the logic around your observer pattern with easy to read chuncks of code with a light footprint.**\r\n\r\n    \r\nJust take the subway instead of sitting in the trafic jam...\r\n\r\n\r\n---- \r\n\r\n_PubSubway provides an underground system (of tunnels) helping you with real world callback hell. Think subway in a trafic jam._\r\n\r\n----\r\n\r\n\r\n```javascript\r\n/*\r\n  \t\r\n  \t* Example * \r\n\t***********/\r\n\t\r\n  \tvar db = require('mysql');\r\n  \tvar go = require('pubsubway');\r\n\r\n\t\r\n\tvar mysql = createConnection(db);\r\n\r\n\r\n  \tgo.whenAND(['/sql_a/done', '/sql_b/done'], function(){\r\n  \t\tconsole.log('Both SQL a and SQL b are done now');\r\n  \t});\r\n\r\n\r\n\tmysql.query('UPDATE product SET stock = 7 WHERE id = 423', function(){\r\n\t\tgo.yell('/sql_a/done')\r\n\t});\r\n\r\n\r\n\tmysql.query('UPDATE product SET stock = 2 WHERE id = 332', function(){\r\n\t\tgo.yell('/sql_b/done')\r\n\t});\t\r\n\r\n```\r\n\r\n\r\nTo use in regular browser just include file as normal (Yay!) \r\n\r\n```HTML\r\n    <script src=\"pubsubway.js\" type=\"text/javascript\"></script>\r\n```\r\n\r\nIn the browser you use the examples with `pubsubway.*` instead of the `go.*` - and ignore the 'require' line.\r\n\r\n\r\n    \r\n\r\n\r\n# The pubsub pattern\r\n\r\nPlease remember that the pubsub pattern is best suited to publish messages about what **has happened**.\r\nDont fall into the pifall of using it as regular functions. A good idea is to label your topics in past sense.\r\n\r\n\r\n\r\n# ToDo \r\n\r\n- **Tests**: \r\nThe module is used and enchanged in production - so it works, but better get those formal tests up and running) \r\n\r\n- **Documentation**:\r\nLets get that documentation up and running\r\n\r\n- **Better introduction**:\r\nWell - just do it\r\n\r\n- **pubAlert**:\r\noptional Log warning when something is published that nothing is subscribed to. Good fro development. \r\n\r\n- **pubBuffer**:\r\nSetting to buffer all publications untill released. Good for when you publish things in your sync flow, but want to message something that will be observing a little later caused by async waiting. Is it bad structure of the code? well, if it is used in the main flow it is, but during the initial load of code it is not. \r\n\r\n\r\n\r\n# Documentation\r\n\r\nYou include the module with a traditional `var go = require('pubsubway');` or any name you find suitable. In the documentation I chose `go` cause it short and sounds nice. \r\n\r\nDepending on the style of program you are developing I personally prefer either long and javaish style method names or short names that fit into the rest of the code more seamless. Thats why the API comes with a bunch of aliases  \r\n\r\n\r\n\r\n\r\n## Publish a message\r\n\r\n```javascript\r\n    go.pub =\r\n    go.yell =  \r\n    go.publish = function(\r\n                            topic /* string */ \r\n                            ,  \r\n                            args /* array */\r\n                            )\r\n```\r\n\r\n\r\n## Subscribe to a message\r\n\r\nTo listen to a single message and invoke code is trivial - but when you want to listen to several messages you are suddenly left with a lot of choises recarding how to handle the logic around it. \r\n\r\n\r\n\r\n### Subscribe to any of these messages (OR mode)\r\n\r\n```javascript\r\n \tgo.sub =\r\n   \tgo.when =\r\n   \tgo.subOR =\r\n   \tgo.whenOR =\r\n    go.subscribe = function(\t\ttopic\t\t\t/* string || array */\r\n\t\t\t\t\t\t\t\t\t, \r\n\t\t\t\t\t\t\t\t\tcallback \t\t/* Function */\r\n\t\t\t\t\t\t\t\t\t, \r\n\t\t\t\t\t\t\t\t\tsubscribeFirst \t/* [bool] */\r\n\t\t\t\t\t\t\t\t\t,\r\n\t\t\t\t\t\t\t\t\tmode\t\t\t/* string */\r\n\t\t\t\t\t\t\t\t\t) \r\n ```     \r\n\r\n**Example** \r\n   \r\n```javascript\r\n\tgo.subscribe(\"/foo/bar\", function(a, b, c){ \r\n\t\t... \r\n\t}); \r\n        \r\n```          \r\n\r\n### Subscribe to any of these messages (OR mode) and invoke only once\r\n\r\n```javascript\r\n \tgo.sub1 =\r\n   \tgo.when1 =\r\n   \tgo.subOR1 =\r\n   \tgo.whenOR1 =\r\n    go.subscribeOnce = function(\ttopic\t\t\t/* string || array */\r\n\t\t\t\t\t\t\t\t\t, \r\n\t\t\t\t\t\t\t\t\tcallback \t\t/* Function */\r\n\t\t\t\t\t\t\t\t\t, \r\n\t\t\t\t\t\t\t\t\tsubscribeFirst \t/* [bool] */\r\n\t\t\t\t\t\t\t\t\t,\r\n\t\t\t\t\t\t\t\t\tmode\t\t\t/* string */\r\n\t\t\t\t\t\t\t\t\t) \r\n ```     \r\n\t\r\n\r\n## Subscribe to all these messages = only start invoking when all of them have been published (AND mode)\r\n   \r\n```javascript  \r\n  \tgo.subAND =\r\n  \tgo.whenAND =\r\n  \tgo.subscribeAND =\r\n    go.subscribeANDmodeContinues = function(\r\n                                                topic /* string || array */\r\n                                                , \r\n                                                callback /* Function */\r\n                                                , \r\n                                                subscribeFirst /* [bool] */ \r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n```\r\n\r\n  \tme.subAND1 =\r\n  \tme.whenAND1 = \r\n    me.subscribeANDmodeOnce = function(\r\n                                                topic           /* string || array */\r\n                                                , \r\n                                                callback        /* Function */\r\n                                                , \r\n                                                subscribeFirst  /* [bool] */ \r\n                                            ){ \r\n        //ToDo:implement reset\r\n        me.subscribe(topic, callback, subscribeFirst, 'ANDmodeOnce') \r\n    }; \r\n\r\n# Subscribe to messages but only start invoking each time all of them have been published again. \r\n   \r\n       \r\n ```javascript \r\n  \tgo.subREWIND =\r\n\tgo.whenREWIND =\r\n\tgo.subscribeREWIND =\r\n    go.subscribeANDmodeRewind = function(\r\n    \t\t\t\t\t\t\t\t\t\ttopic             /* string || array */ \r\n    \t\t\t\t\t\t\t\t\t\t, \r\n    \t\t\t\t\t\t\t\t\t\tcallback          /* Function */\r\n    \t\t\t\t\t\t\t\t\t\t, \r\n    \t\t\t\t\t\t\t\t\t\tsubscribeFirst    /* [bool] */ \r\n    \t\t\t\t\t\t\t\t\t) \r\n```\r\n\r\n# Subscribe to messages but pause and restart with \r\n  \r\n\t\t\t\t\t\t\t\t\t\t\t\r\n```javascript  \r\n  \tgo.whenORBUT = \r\n  \tgo.subORBUT = \r\n    go.subscribeORmodeButNotIfButResetWith = function(\r\n                                                        topic /* string || array */ \r\n                                                        ,\r\n                                                        butNotIf /* string || array */\r\n                                                        ,\r\n                                                        resetWith /* string || array */\r\n                                                        , \r\n                                                        callback /* Function */\r\n                                                        , \r\n                                                        subscribeFirst /* [bool] */\r\n                                                    ) \r\n```          \r\n    \r\n# Unsubscribe a subscription\r\n\t\r\n```javascript  \r\n    go.unsub =\r\n    go.unsubscribe = function(handle /* Array */){ \r\n\t       \r\n        //    var handle = pubsubway.subscribe(\"/foo\", function(){}); \r\n        //    pubsubway.unsubscribe(handle); \r\n  \t\t\r\n  \t\t// ToDo: make it possible to resubscribe a handle\r\n\t\t// ToDo: implement go.subways[uid].handlers check \r\n```\t\r\n\t\r\n\t\r\n\r\n# Log the publications\t\r\n\t\r\n\t\r\n\r\n\r\n ```javascript\r\n    go.log = function(/* string */ msg, /* integer */ level){ \r\n        //  log events -  \r\n        //  Please overwrite behavior with something like\r\n        //  $.log = function(msg){alert(msg)} \r\n          \r\n        if(doLog && level<=100){ \r\n            console.log('pub/sub: ' + msg); \r\n        } \r\n    }; \r\n```\t\r\n\r\n\r\n# Start/stop logging\r\n\r\n```javascript      \r\n\tgo.doLog = function(/*bool*/ val)\r\n```    \r\n\r\n# Stop all publications\r\n\r\n_The big handbrake_\r\n\r\n```javascript      \r\n    go.voidAction = function(/*bool*/ val){ \r\n```\r\n\r\n\r\n# Wrap topics\r\n\r\nWrab topics to act like traditional callback function to handle strings as callbacks\r\n\r\n```javascript\r\n\t// Make it convinient to publish string instead of sending function as callback \r\n    // Use in your own funktion like:       \r\n    // \t\tcallback_function = go.pubsubBack(topic /* sting */)\r\n    // to be able to put a function or a string to publish as your own callback \r\n\t\r\n\tgo.pubsubBack(topic /* sting */)\r\n\r\n```\r\n\r\n----\r\n\r\n\r\nLoosely based on jQuery pub/sub plugin by Peter Higgins, expanded in scope. Rewritten blindly. \r\n  \t\r\nLicense: MIT\r\n\r\nPattern: Observer \r\n\r\n----\r\n___Any involvement in the project is always welcome, and encouraged.___\r\n----\r\n",
  "readmeFilename": "README.md",
  "gitHead": "49c0512a132df34d3f702e36b6926c5700c64e73",
  "_id": "pubsubway@0.19.2",
  "_shasum": "83fc762718a81e0d3f948be5c9aa804f8bfbc415",
  "_from": "pubsubway"
}
